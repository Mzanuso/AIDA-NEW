/**
 * Test per il Conversational Orchestrator
 * Pattern copiato dal vecchio progetto: backend/services/orchestrator/__tests__/orchestrator.test.ts
 */
import { describe, test, expect, beforeEach, vi, afterEach } from 'vitest';
import { processConversation } from '../conversational-orchestrator';
import type { ConversationContext } from '../../types';

// Mock Anthropic SDK
vi.mock('@anthropic-ai/sdk', () => {
  return {
    default: vi.fn().mockImplementation(() => ({
      messages: {
        create: vi.fn().mockResolvedValue({
          id: 'msg_test123',
          type: 'message',
          role: 'assistant',
          content: [{
            type: 'text',
            text: 'Ciao! Come posso aiutarti oggi?'
          }],
          model: 'claude-sonnet-4-20250514',
          stop_reason: 'end_turn',
          usage: { input_tokens: 100, output_tokens: 50 }
        })
      }
    }))
  };
});

// Mock Style Selector Client
vi.mock('../../clients/style-selector-client', () => ({
  StyleSelectorClient: vi.fn().mockImplementation(() => ({
    getStyles: vi.fn().mockResolvedValue([
      {
        id: 1,
        name: 'Minimale',
        category: 'Modern',
        code: 'SREF_001',
        thumbnailUrl: 'https://example.com/style1.jpg'
      }
    ])
  }))
}));

describe('Conversational Orchestrator', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  describe('processConversation', () => {
    test('should handle initial greeting message', async () => {
      const result = await processConversation({
        message: 'Ciao!',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      expect(result).toHaveProperty('message');
      expect(result).toHaveProperty('sessionId');
      expect(result.sessionId).toMatch(/^session_/);
      expect(result.phase).toBe('discovery');
    });

    test('should detect style request intent', async () => {
      const result = await processConversation({
        message: 'Mostrami degli stili fotografici',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      expect(result).toHaveProperty('metadata');
      expect(result.metadata?.detectedIntent?.type).toBe('style_request');
    });

    test('should handle URL in message', async () => {
      const result = await processConversation({
        message: 'Leggi i titoli di questa pagina: https://www.anthropic.com/',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      expect(result).toHaveProperty('message');
      expect(result.phase).toBe('discovery');
    });

    test('should reuse existing session', async () => {
      const sessionId = 'session_existing_123';

      const result = await processConversation({
        message: 'Continua il progetto',
        sessionId,
        userId: 'user_test_123'
      });

      expect(result.sessionId).toBe(sessionId);
    });

    test('should return style modal metadata when styles requested', async () => {
      const result = await processConversation({
        message: 'Voglio vedere degli stili visivi',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      // Dovrebbe triggare la modal degli stili
      expect(result.metadata).toBeDefined();
      // In un test reale, verificheremmo che showStyleModal sia true
    });
  });

  describe('Error Handling', () => {
    test('should handle empty message gracefully', async () => {
      await expect(
        processConversation({
          message: '',
          sessionId: undefined,
          userId: 'user_test_123'
        })
      ).rejects.toThrow();
    });

    test('should handle missing userId', async () => {
      await expect(
        processConversation({
          message: 'Test message',
          sessionId: undefined,
          userId: undefined as any
        })
      ).rejects.toThrow();
    });
  });

  describe('Context Management', () => {
    test('should initialize context for new session', async () => {
      const result = await processConversation({
        message: 'Nuovo progetto',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      expect(result.sessionId).toBeDefined();
      expect(result.phase).toBe('discovery');
    });

    test('should maintain context across messages', async () => {
      // Prima messaggio
      const result1 = await processConversation({
        message: 'Voglio creare un video',
        sessionId: undefined,
        userId: 'user_test_123'
      });

      // Secondo messaggio con stesso sessionId
      const result2 = await processConversation({
        message: 'In stile cinematografico',
        sessionId: result1.sessionId,
        userId: 'user_test_123'
      });

      expect(result2.sessionId).toBe(result1.sessionId);
    });
  });
});
